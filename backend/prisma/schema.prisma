// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String?
  phone     String    @unique
  role      String    @default("user") // "admin" or "user"
  otp       String? // OTP for authentication
  otpExpiry DateTime? // Expiry time for OTP
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cartId  String?   @unique
  Cart    Cart?
  // Order   Order[]
  // Address Address[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  images      String[] // Array of image URLs
  category    String //men or women
  brand       String? // Optional brand name
  sizes       Json // Available sizes (e.g., ["S", "M", "L", "XL"])
  tags        String[] // SEO-friendly tags (e.g., ["denim", "jeans", "slim fit"])
  discount    Float? // Optional discount percentage
  embedding   Json     @db.JsonB
  disabled    Boolean  @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CartItem  CartItem[]
  // OrderItem OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique // Ensures one cart per user
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int     @default(1)
  size      String? // Optional size
}

// model Order {
//   id                String      @id @default(uuid())
//   user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId            String
//   items             OrderItem[]
//   totalAmount       Float                           // Total order cost
//   status            String      @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
//   paymentStatus     String      @default("unpaid")  // "unpaid", "paid", "failed"
//   paymentMethod     String?     @default("cod")     // "cod", "credit_card", "upi", etc.
  
//   addressId         String
//   address           Address     @relation(fields: [addressId], references: [id]) // Fixed typo
  
//   razorpayOrderId   String? // Razorpay Order ID for tracking
//   razorpayPaymentId String? // Razorpay Payment ID (captured during payment)
//   razorpaySignature String? // Signature for payment verification

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model OrderItem {
//   id        String  @id @default(uuid())
//   order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   orderId   String
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String
//   quantity  Int     @default(1)
//   size      String? // Size selected for the order
//   price     Float // Price at the time of order (in case of discounts or price changes)
// }

// model Address {
//   id     String @id @default(uuid())
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String

//   fullName  String
//   phone     String
//   street    String?
//   city      String
//   state     String
//   country   String
//   pincode   String
//   landmark  String? // Optional field for nearby landmarks
//   isDefault Boolean @default(false) // Marks the default address for the user

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Order     Order[] // This means one address can be linked to multiple orders
// }
