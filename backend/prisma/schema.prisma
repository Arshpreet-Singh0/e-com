generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  phone     String    @unique
  role      String    @default("user")
  otp       String?
  otpExpiry DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cartId    String?   @unique
  email     String?
  Cart      Cart?
  Order     Order[]
  Address   Address[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  images      String[]
  category    String
  brand       String?
  sizes       Json
  tags        String[]
  discount    Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  embedding   Json
  disabled    Boolean     @default(false)
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  size      String?
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  items         OrderItem[]
  totalAmount   Float // Total order cost
  status        String      @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  paymentStatus String      @default("unpaid") // "unpaid", "paid", "failed"
  paymentMethod String?   // "cod", "credit_card", "upi", etc.

  addressId String
  address   Address @relation(fields: [addressId], references: [id]) // Fixed typo

  razorpayOrderId   String? // Razorpay Order ID for tracking
  razorpayPaymentId String? // Razorpay Payment ID (captured during payment)
  razorpaySignature String? // Signature for payment verification

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int     @default(1)
  size      String? // Size selected for the order
  price     Float // Price at the time of order (in case of discounts or price changes)
}

model Address {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  firstName String
  lastName  String?
  email     String
  phone     String
  street    String?
  city      String
  state     String
  country   String?
  pincode   String
  landmark  String? // Optional field for nearby landmarks
  isDefault Boolean @default(false) // Marks the default address for the user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[] // This means one address can be linked to multiple orders
}
