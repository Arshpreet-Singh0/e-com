// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  phone     String    @unique
  role      String    @default("user") // "admin" or "user"
  otp       String? // OTP for authentication
  otpExpiry DateTime? // Expiry time for OTP
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cartId String? @unique
  Cart   Cart?
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  images      String[] // Array of image URLs
  category    String //men or women
  brand       String? // Optional brand name
  sizes       String[] // Available sizes (e.g., ["S", "M", "L", "XL"])
  tags        String[] // SEO-friendly tags (e.g., ["denim", "jeans", "slim fit"])
  discount    Float? // Optional discount percentage
  embedding   Json     @db.JsonB
  disabled    Boolean  @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique // Ensures one cart per user
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
}
